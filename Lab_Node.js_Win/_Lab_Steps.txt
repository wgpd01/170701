Node.js 程式入門實作

________________________________________________________________________________

<Note>以下的操作說明均以 c:\NodeJS_Lab 為例進行說明。
________________________________________________________________________________


1.	安裝 Node.JS

1.1	用瀏覽器開啟 http://nodejs.org/


1.2	點按 Downloads 按紐


1.3	點按 Windows Installer


1.4	執行下載回來的 node-v0.版本.數字-x86.msi，按照安裝程式的預設值進行安裝。


1.5	在 c:\NodeJS_Lab 建立一個檔名為 hello.js 的檔案，檔案只有一行內容，如下:
	console.log("Hello!");


1.6	啟動「命令提示字元」，然後輸入下列指令切換工作目錄:
	cd \NodeJS_Lab


1.7	執行 hello.js，在「命令提示字元」輸入下列指令:
	node hello.js




2.	以 NodeJS 讀寫檔案

2.1	建立檔案。
	在 c:\NodeJS_Lab 資料夾建立一個檔名為 writeFile.js 的檔案，檔案內容如下:

var fs = require("fs");
console.log("Starting...");
fs.writeFile("./hello.html", 
  "<html><body><h1>Hello!</h1></body></html>",
  function (error) {
	console.log("file has written.");
  }
);
console.log("Done.");


2.2	以 node writeFile.js 執行並觀察 console.log 文字的出現次序。


2.3	修改 writeFile.js 的程式，改成這樣:

var fs = require("fs");
console.log("Starting...");
fs.writeFileSync("./world.html", 
  "<html><body><h1>Hello! World.</h1></body></html>");
console.log("Done.");


2.4	以記事本檢視 c:\NodeJS_Lab\config.json 檔案內容
{
	"port": "3000",
	"host": "127.0.0.1"
}


2.5	在 c:\NodeJS_Lab 資料夾建立一個檔名為 readFile.js 的檔案，檔案內容如下:

var fs = require("fs");
console.log("Starting...");
var data = fs.readFileSync("config.json");
console.log("file content: " + data);
var config = JSON.parse(data);
console.log("Port: " + config.port);
console.log("Done.");


2.6	在 c:\NodeJS_Lab 資料夾建立一個檔名為 watchFile.js 的檔案，檔案內容如下:

var fs = require("fs");
console.log("Starting...");
var config = JSON.parse(fs.readFileSync("config.json"));
console.log("Config file: ", config);

fs.watchFile("config.json", function (current, previous) {
	console.log("Config file changed.");
	config = JSON.parse(fs.readFileSync("config.json"));
	console.log("Config file: ", config);
});


2.7	node watchFile.js 執行程式。


2.8	修改 config.json 的內容，存檔後，觀察 2.7 的畫面變化。


2.9	以組合鍵 Ctrl + C 結束程式。




3.	以 Node.js 建立 Web Server

3.1	在 c:\NodeJS_Lab 資料夾建立一個檔名為 createServer.js 的檔案，檔案內容如下:
var http = require("http");
console.log("Starting...");
var host = "127.0.0.1";
var port = 3003;
var server = http.createServer( function (request, response) {
	console.log("Got a request: " + request.url);
	response.writeHead(200, {"Content-type": "text/plain"});
	response.end("Hello! I'm a Node.JS server.");
});

server.listen(port, host, function () {
	console.log("Listening...");
});


3.2	以瀏覽器連接 http://localhost:3003


3.3	將 createServer.js 的程式修改成下列內容，然後重新執行一次。

var http = require("http");
var fs = require("fs");
console.log("Starting...");
var host = "127.0.0.1";
var port = 3003;
var server = http.createServer( function (request, response) {
	console.log("Got a request: " + request.url);
	fs.readFile("." + request.url, function (error, data) {
		if (error) {
			response.writeHead(404, {"Content-type": "text/plain"});
			response.end("File not found.");
		} else {
			response.writeHead(200, {"Content-type": "text/html"});
			response.end(data);
		}
	});
});

server.listen(port, host, function () {
	console.log("Listening...");
});


3.4	以瀏覽器開啟 http://localhost:3003/hello.html


3.5	將 createServer.js 的程式修改成下列內容，然後重新執行一次。

var http = require("http");
var fs = require("fs");
console.log("Starting...");
var config = JSON.parse(fs.readFileSync("config.json"));
var host = config.host;
var port = config.port;
var server = http.createServer( function (request, response) {
	console.log("Got a request: " + request.url);
	fs.readFile("." + request.url, function (error, data) {
		if (error) {
			response.writeHead(404, {"Content-type": "text/plain"});
			response.end("File not found.");
		} else {
			response.writeHead(200, {"Content-type": "text/html"});
			response.end(data);
		}
	});
});

server.listen(port, host, function () {
	console.log("Listening...");
});


3.6	以瀏覽器開啟 http://localhost:埠號/hello.html	
	<Note> 埠號為 config.json 設定的 port 屬性值。


3.7	以組合鍵 Ctrl + C 結束程式。




4	利用 Node.js ＋ Express 模組建立 Web Server

4.1	在「命令提示字元」輸入「npm install express」
	<Note>如果出現類似下列文字的錯誤訊息，請依路徑手動建立 npm 資料夾。
	Error: ENOENT, stat 'C:\Users\使用者帳號\AppData\Roaming\npm'


4.2	將 createServer.js 的程式修改成下列內容，然後重新執行一次。

console.log("Starting...");
var fs = require("fs");
var config = JSON.parse(fs.readFileSync("config.json"));
var host = config.host;
var port = config.port;
var express = require("express");

var app = express();

app.get("/", function (request, response) {
	response.send("hello!");
});

app.listen(port, host);


4.3	以瀏覽器開啟 http://localhost:埠號
	<Note> 埠號為 config.json 設定的 port 屬性值。


4.4	將 createServer.js 的程式修改成下列內容，然後重新執行一次。

console.log("Starting...");
var fs = require("fs");
var config = JSON.parse(fs.readFileSync("config.json"));
var host = config.host;
var port = config.port;
var express = require("express");

var app = express();

app.get("/", function (request, response) {
	response.send("hello!");
});

app.get("/hello/:text", function (request, response) {
	response.send("Hello!" + request.params.text);
});

app.listen(port, host);


4.5	以瀏覽器開啟 http://localhost:埠號/hello/你的名字
	<Note> 埠號為 config.json 設定的 port 屬性值。


4.6	以組合鍵 Ctrl + C 結束程式。




5.	Node.js 的模組化設計

5.1	在 c:\NodeJS_Lab 資料夾建立一個檔名為 myModule.js 的檔案，檔案內容如下:

function hello(who) {
	return "Hello! " + who;
}

module.exports.hello = hello;


5.2	在 c:\NodeJS_Lab 資料夾建立一個檔名為 usingModule.js 的檔案，檔案內容如下:

var myModule = require("./myModule.js");
var rtn = myModule.hello("World");
console.log(rtn);


5.3	node usingModule.js 執行程式。


